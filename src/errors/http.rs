use cdumay_error::{define_errors, define_kinds, AsError, Error};
use http::StatusCode;
use std::collections::BTreeMap;

define_kinds! {
    INVALID_URL = ("Err-27071", 400, "Invalid url"),
    GENERIC_HTTP_CLIENT_ERROR = ("Err-05192", 500, "Generic HTTP client error"),
    MULTIPLE_CHOICES = ("Err-11298", 300, "Multiple Choices"),
    MOVED_PERMANENTLY = ("Err-23108", 301, "Moved Permanently"),
    FOUND = ("Err-07132", 302, "Found"),
    SEE_OTHER = ("Err-16746", 303, "See Other"),
    NOT_MODIFIED = ("Err-21556", 304, "Not Modified"),
    USE_PROXY = ("Err-31839", 305, "Use Proxy"),
    TEMPORARY_REDIRECT = ("Err-25446", 307, "Temporary Redirect"),
    PERMANENT_REDIRECT = ("Err-12280", 308, "Permanent Redirect"),
    BAD_REQUEST = ("Err-26760", 400, "Bad Request"),
    UNAUTHORIZED = ("Err-08059", 401, "Unauthorized"),
    PAYMENT_REQUIRED = ("Err-18076", 402, "Payment Required"),
    FORBIDDEN = ("Err-23134", 403, "Forbidden"),
    NOT_FOUND = ("Err-18430", 404, "Not Found"),
    METHOD_NOT_ALLOWED = ("Err-23585", 405, "Method Not Allowed"),
    NOT_ACCEPTABLE = ("Err-04289", 406, "Not Acceptable"),
    PROXY_AUTHENTICATION_REQUIRED = ("Err-17336", 407, "Proxy Authentication Required"),
    REQUEST_TIMEOUT = ("Err-00565", 408, "Request Timeout"),
    CONFLICT = ("Err-08442", 409, "Conflict"),
    GONE = ("Err-19916", 410, "Gone"),
    LENGTH_REQUIRED = ("Err-09400", 411, "Length Required"),
    PRECONDITION_FAILED = ("Err-22509", 412, "Precondition Failed"),
    PAYLOAD_TOO_LARGE = ("Err-10591", 413, "Payload Too Large"),
    URI_TOO_LONG = ("Err-01377", 414, "URI Too Long"),
    UNSUPPORTED_MEDIA_TYPE = ("Err-12512", 415, "Unsupported Media Type"),
    RANGE_NOT_SATISFIABLE = ("Err-21696", 416, "Range Not Satisfiable"),
    EXPECTATION_FAILED = ("Err-16872", 417, "Expectation Failed"),
    IM_A_TEAPOT = ("Err-23719", 418, "I'm a teapot"),
    MISDIRECTED_REQUEST = ("Err-26981", 421, "Misdirected Request"),
    UNPROCESSABLE_ENTITY = ("Err-12568", 422, "Unprocessable Entity"),
    LOCKED = ("Err-32695", 423, "Locked"),
    FAILED_DEPENDENCY = ("Err-19693", 424, "Failed Dependency"),
    UPGRADE_REQUIRED = ("Err-22991", 426, "Upgrade Required"),
    PRECONDITION_REQUIRED = ("Err-02452", 428, "Precondition Required"),
    TOO_MANY_REQUESTS = ("Err-12176", 429, "Too Many Requests"),
    REQUEST_HEADER_FIELDS_TOO_LARGE = ("Err-07756", 431, "Request Header Fields Too Large"),
    UNAVAILABLE_FOR_LEGAL_REASONS = ("Err-12136", 451, "Unavailable For Legal Reasons"),
    INTERNAL_SERVER_ERROR = ("Err-09069", 500, "Internal Server Error"),
    NOT_IMPLEMENTED = ("Err-03394", 501, "Not Implemented"),
    BAD_GATEWAY = ("Err-19734", 502, "Bad Gateway"),
    SERVICE_UNAVAILABLE = ("Err-18979", 503, "Service Unavailable"),
    GATEWAY_TIMEOUT = ("Err-17595", 504, "Gateway Timeout"),
    HTTP_VERSION_NOT_SUPPORTED = ("Err-01625", 505, "HTTP Version Not Supported"),
    VARIANT_ALSO_NEGOTIATES = ("Err-28382", 506, "Variant Also Negotiates"),
    INSUFFICIENT_STORAGE = ("Err-32132", 507, "Insufficient Storage"),
    LOOP_DETECTED = ("Err-30770", 508, "Loop Detected"),
    NOT_EXTENDED = ("Err-19347", 510, "Not Extended"),
    NETWORK_AUTHENTICATION_REQUIRED = ("Err-31948", 511, "Network Authentication Required"),
}

define_errors! {
    MultipleChoices = MULTIPLE_CHOICES,
    MovedPermanently = MOVED_PERMANENTLY,
    Found = FOUND,
    SeeOther = SEE_OTHER,
    NotModified = NOT_MODIFIED,
    UseProxy = USE_PROXY,
    TemporaryRedirect = TEMPORARY_REDIRECT,
    PermanentRedirect = PERMANENT_REDIRECT,
    BadRequest = BAD_REQUEST,
    Unauthorized = UNAUTHORIZED,
    PaymentRequired = PAYMENT_REQUIRED,
    Forbidden = FORBIDDEN,
    NotFound = NOT_FOUND,
    MethodNotAllowed = METHOD_NOT_ALLOWED,
    NotAcceptable = NOT_ACCEPTABLE,
    ProxyAuthenticationRequired = PROXY_AUTHENTICATION_REQUIRED,
    RequestTimeout = REQUEST_TIMEOUT,
    Conflict = CONFLICT,
    Gone = GONE,
    LengthRequired = LENGTH_REQUIRED,
    PreconditionFailed = PRECONDITION_FAILED,
    PayloadTooLarge = PAYLOAD_TOO_LARGE,
    UriTooLong = URI_TOO_LONG,
    UnsupportedMediaType = UNSUPPORTED_MEDIA_TYPE,
    RangeNotSatisfiable = RANGE_NOT_SATISFIABLE,
    ExpectationFailed = EXPECTATION_FAILED,
    ImATeapot = IM_A_TEAPOT,
    MisdirectedRequest = MISDIRECTED_REQUEST,
    UnprocessableEntity = UNPROCESSABLE_ENTITY,
    Locked = LOCKED,
    FailedDependency = FAILED_DEPENDENCY,
    UpgradeRequired = UPGRADE_REQUIRED,
    PreconditionRequired = PRECONDITION_REQUIRED,
    TooManyRequests = TOO_MANY_REQUESTS,
    RequestHeaderFieldsTooLarge = REQUEST_HEADER_FIELDS_TOO_LARGE,
    UnavailableForLegalReasons = UNAVAILABLE_FOR_LEGAL_REASONS,
    InternalServerError = INTERNAL_SERVER_ERROR,
    NotImplemented = NOT_IMPLEMENTED,
    BadGateway = BAD_GATEWAY,
    ServiceUnavailable = SERVICE_UNAVAILABLE,
    GatewayTimeout = GATEWAY_TIMEOUT,
    HttpVersionNotSupported = HTTP_VERSION_NOT_SUPPORTED,
    VariantAlsoNegotiates = VARIANT_ALSO_NEGOTIATES,
    InsufficientStorage = INSUFFICIENT_STORAGE,
    LoopDetected = LOOP_DETECTED,
    NotExtended = NOT_EXTENDED,
    NetworkAuthenticationRequired = NETWORK_AUTHENTICATION_REQUIRED,
}

pub fn from_status(status: StatusCode, txt: String, ctx: BTreeMap<String, serde_value::Value>) -> Error {
    match status {
        StatusCode::MOVED_PERMANENTLY => Error::from(MovedPermanently::new().set_message(txt).set_details(ctx)),
        StatusCode::FOUND => Error::from(Found::new().set_message(txt).set_details(ctx)),
        StatusCode::SEE_OTHER => Error::from(SeeOther::new().set_message(txt).set_details(ctx)),
        StatusCode::NOT_MODIFIED => Error::from(NotModified::new().set_message(txt).set_details(ctx)),
        StatusCode::USE_PROXY => Error::from(UseProxy::new().set_message(txt).set_details(ctx)),
        StatusCode::TEMPORARY_REDIRECT => Error::from(TemporaryRedirect::new().set_message(txt).set_details(ctx)),
        StatusCode::PERMANENT_REDIRECT => Error::from(PermanentRedirect::new().set_message(txt).set_details(ctx)),
        StatusCode::BAD_REQUEST => Error::from(BadRequest::new().set_message(txt).set_details(ctx)),
        StatusCode::UNAUTHORIZED => Error::from(Unauthorized::new().set_message(txt).set_details(ctx)),
        StatusCode::PAYMENT_REQUIRED => Error::from(PaymentRequired::new().set_message(txt).set_details(ctx)),
        StatusCode::FORBIDDEN => Error::from(Forbidden::new().set_message(txt).set_details(ctx)),
        StatusCode::NOT_FOUND => Error::from(NotFound::new().set_message(txt).set_details(ctx)),
        StatusCode::METHOD_NOT_ALLOWED => Error::from(MethodNotAllowed::new().set_message(txt).set_details(ctx)),
        StatusCode::NOT_ACCEPTABLE => Error::from(NotAcceptable::new().set_message(txt).set_details(ctx)),
        StatusCode::PROXY_AUTHENTICATION_REQUIRED => Error::from(ProxyAuthenticationRequired::new().set_message(txt).set_details(ctx)),
        StatusCode::REQUEST_TIMEOUT => Error::from(RequestTimeout::new().set_message(txt).set_details(ctx)),
        StatusCode::CONFLICT => Error::from(Conflict::new().set_message(txt).set_details(ctx)),
        StatusCode::GONE => Error::from(Gone::new().set_message(txt).set_details(ctx)),
        StatusCode::LENGTH_REQUIRED => Error::from(LengthRequired::new().set_message(txt).set_details(ctx)),
        StatusCode::PRECONDITION_FAILED => Error::from(PreconditionFailed::new().set_message(txt).set_details(ctx)),
        StatusCode::PAYLOAD_TOO_LARGE => Error::from(PayloadTooLarge::new().set_message(txt).set_details(ctx)),
        StatusCode::URI_TOO_LONG => Error::from(UriTooLong::new().set_message(txt).set_details(ctx)),
        StatusCode::UNSUPPORTED_MEDIA_TYPE => Error::from(UnsupportedMediaType::new().set_message(txt).set_details(ctx)),
        StatusCode::RANGE_NOT_SATISFIABLE => Error::from(RangeNotSatisfiable::new().set_message(txt).set_details(ctx)),
        StatusCode::EXPECTATION_FAILED => Error::from(ExpectationFailed::new().set_message(txt).set_details(ctx)),
        StatusCode::IM_A_TEAPOT => Error::from(ImATeapot::new().set_message(txt).set_details(ctx)),
        StatusCode::MISDIRECTED_REQUEST => Error::from(MisdirectedRequest::new().set_message(txt).set_details(ctx)),
        StatusCode::UNPROCESSABLE_ENTITY => Error::from(UnprocessableEntity::new().set_message(txt).set_details(ctx)),
        StatusCode::LOCKED => Error::from(Locked::new().set_message(txt).set_details(ctx)),
        StatusCode::FAILED_DEPENDENCY => Error::from(FailedDependency::new().set_message(txt).set_details(ctx)),
        StatusCode::UPGRADE_REQUIRED => Error::from(UpgradeRequired::new().set_message(txt).set_details(ctx)),
        StatusCode::PRECONDITION_REQUIRED => Error::from(PreconditionRequired::new().set_message(txt).set_details(ctx)),
        StatusCode::TOO_MANY_REQUESTS => Error::from(TooManyRequests::new().set_message(txt).set_details(ctx)),
        StatusCode::REQUEST_HEADER_FIELDS_TOO_LARGE => {
            Error::from(RequestHeaderFieldsTooLarge::new().set_message(txt).set_details(ctx))
        }
        StatusCode::UNAVAILABLE_FOR_LEGAL_REASONS => Error::from(UnavailableForLegalReasons::new().set_message(txt).set_details(ctx)),
        StatusCode::INTERNAL_SERVER_ERROR => Error::from(InternalServerError::new().set_message(txt).set_details(ctx)),
        StatusCode::NOT_IMPLEMENTED => Error::from(NotImplemented::new().set_message(txt).set_details(ctx)),
        StatusCode::BAD_GATEWAY => Error::from(BadGateway::new().set_message(txt).set_details(ctx)),
        StatusCode::SERVICE_UNAVAILABLE => Error::from(ServiceUnavailable::new().set_message(txt).set_details(ctx)),
        StatusCode::GATEWAY_TIMEOUT => Error::from(GatewayTimeout::new().set_message(txt).set_details(ctx)),
        StatusCode::HTTP_VERSION_NOT_SUPPORTED => Error::from(HttpVersionNotSupported::new().set_message(txt).set_details(ctx)),
        StatusCode::VARIANT_ALSO_NEGOTIATES => Error::from(VariantAlsoNegotiates::new().set_message(txt).set_details(ctx)),
        StatusCode::INSUFFICIENT_STORAGE => Error::from(InsufficientStorage::new().set_message(txt).set_details(ctx)),
        StatusCode::LOOP_DETECTED => Error::from(LoopDetected::new().set_message(txt).set_details(ctx)),
        StatusCode::NOT_EXTENDED => Error::from(NotExtended::new().set_message(txt).set_details(ctx)),
        StatusCode::NETWORK_AUTHENTICATION_REQUIRED => {
            Error::from(NetworkAuthenticationRequired::new().set_message(txt).set_details(ctx))
        },
        _ => Error::from(InternalServerError::new().set_message(txt).set_details(ctx)),
    }
}
